<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\HandPad_BPG1101B_20220222.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\HandPad_BPG1101B_20220222.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed May 25 16:14:58 2022
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIMER0_BRK_UP_TRG_COM_IRQHandler &rArr; scan_recv &rArr; scan_y_recv &rArr; scan_main_calculate &rArr; scan_calculate &rArr; Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ADC_CMP_IRQHandler</a><BR>
 <LI><a href="#[21]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BusFault_Handler</a><BR>
 <LI><a href="#[20]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MemManage_Handler</a><BR>
 <LI><a href="#[22]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC_CMP_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[21]">BusFault_Handler</a> from gd32f3x0_it.o(i.BusFault_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[43]">CEC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[30]">DMA_Channel0_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[31]">DMA_Channel1_2_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[32]">DMA_Channel3_4_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[47]">DMA_Channel5_6_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[24]">DebugMon_Handler</a> from gd32f3x0_it.o(i.DebugMon_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2c]">EXTI0_1_IRQHandler</a> from gd32f3x0_it.o(i.EXTI0_1_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2d]">EXTI2_3_IRQHandler</a> from drv_pin.o(i.EXTI2_3_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2e]">EXTI4_15_IRQHandler</a> from drv_pin.o(i.EXTI4_15_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2a]">FMC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1f]">HardFault_Handler</a> from gd32f3x0_it.o(i.HardFault_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[44]">I2C0_ER_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3d]">I2C0_EV_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[45]">I2C1_ER_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[28]">LVD_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[20]">MemManage_Handler</a> from gd32f3x0_it.o(i.MemManage_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1e]">NMI_Handler</a> from gd32f3x0_it.o(i.NMI_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[25]">PendSV_Handler</a> from gd32f3x0_it.o(i.PendSV_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2b]">RCU_CTC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[29]">RTC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3f]">SPI0_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[23]">SVC_Handler</a> from gd32f3x0_it.o(i.SVC_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[26]">SysTick_Handler</a> from gd32f3x0_it.o(i.SysTick_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_gd32f3x0.o(i.SystemInit) referenced from startup_gd32f3x0.o(.text)
 <LI><a href="#[34]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from timer.o(i.TIMER0_BRK_UP_TRG_COM_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[35]">TIMER0_Channel_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[39]">TIMER13_IRQHandler</a> from gd32f3x0_it.o(i.TIMER13_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3a]">TIMER14_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3b]">TIMER15_IRQHandler</a> from timer.o(i.TIMER15_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[3c]">TIMER16_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[36]">TIMER1_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[37]">TIMER2_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[38]">TIMER5_DAC_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[2f]">TSI_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[41]">USART0_IRQHandler</a> from usart.o(i.USART0_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[48]">USBFS_IRQHandler</a> from gd32f3x0_it.o(i.USBFS_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[46]">USBFS_WKUP_IRQHandler</a> from gd32f3x0_it.o(i.USBFS_WKUP_IRQHandler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[22]">UsageFault_Handler</a> from gd32f3x0_it.o(i.UsageFault_Handler) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[27]">WWDGT_IRQHandler</a> from startup_gd32f3x0.o(.text) referenced from startup_gd32f3x0.o(RESET)
 <LI><a href="#[4b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f3x0.o(.text)
 <LI><a href="#[1b]">comm_repeat_report</a> from comm.o(i.comm_repeat_report) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[5a]">gd32_usart_configure</a> from usart.o(i.gd32_usart_configure) referenced from usart.o(.constdata)
 <LI><a href="#[5b]">gd32_usart_control</a> from usart.o(i.gd32_usart_control) referenced from usart.o(.constdata)
 <LI><a href="#[5d]">gd32_usart_getc</a> from usart.o(i.gd32_usart_getc) referenced from usart.o(.constdata)
 <LI><a href="#[5c]">gd32_usart_putc</a> from usart.o(i.gd32_usart_putc) referenced from usart.o(.constdata)
 <LI><a href="#[1a]">iqs5xx_clear_status</a> from iqs.o(i.iqs5xx_clear_status) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[1c]">key_longPressReset</a> from key.o(i.key_longPressReset) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[17]">key_scan</a> from key.o(i.key_scan) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[18]">led_flash_monitor</a> from led.o(i.led_flash_monitor) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[49]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[16]">system_1s_task</a> from system.o(i.system_1s_task) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[19]">system_judge_curr_mode</a> from system.o(i.system_judge_curr_mode) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[58]">usart_ble_led_light_get_response</a> from app_usart.o(i.usart_ble_led_light_get_response) referenced from app_usart.o(.constdata)
 <LI><a href="#[57]">usart_ble_led_light_set_response</a> from app_usart.o(i.usart_ble_led_light_set_response) referenced from app_usart.o(.constdata)
 <LI><a href="#[15]">usart_dispose_recvDataTask</a> from app_usart.o(i.usart_dispose_recvDataTask) referenced 2 times from taskschedule.o(.data)
 <LI><a href="#[59]">usart_dongle_parse</a> from app_usart.o(i.usart_dongle_parse) referenced 2 times from app_usart.o(.constdata)
 <LI><a href="#[51]">usart_get_batt_value</a> from app_usart.o(i.usart_get_batt_value) referenced from app_usart.o(.constdata)
 <LI><a href="#[50]">usart_get_ble_firmwareVer</a> from app_usart.o(i.usart_get_ble_firmwareVer) referenced from app_usart.o(.constdata)
 <LI><a href="#[53]">usart_get_ble_mac</a> from app_usart.o(i.usart_get_ble_mac) referenced from app_usart.o(.constdata)
 <LI><a href="#[54]">usart_get_ble_matches</a> from app_usart.o(i.usart_get_ble_matches) referenced from app_usart.o(.constdata)
 <LI><a href="#[56]">usart_get_ble_status</a> from app_usart.o(i.usart_get_ble_status) referenced from app_usart.o(.constdata)
 <LI><a href="#[52]">usart_get_chrgSta</a> from app_usart.o(i.usart_get_chrgSta) referenced from app_usart.o(.constdata)
 <LI><a href="#[4d]">usart_get_devInfo</a> from app_usart.o(i.usart_get_devInfo) referenced from app_usart.o(.constdata)
 <LI><a href="#[4e]">usart_get_devName</a> from app_usart.o(i.usart_get_devName) referenced from app_usart.o(.constdata)
 <LI><a href="#[4f]">usart_get_handPad_firmwareVer</a> from app_usart.o(i.usart_get_handPad_firmwareVer) referenced from app_usart.o(.constdata)
 <LI><a href="#[55]">usart_get_issue_mac</a> from app_usart.o(i.usart_get_issue_mac) referenced from app_usart.o(.constdata)
 <LI><a href="#[5]">usb_delay_ms</a> from usb_delay.o(i.usb_delay_ms) referenced 2 times from usb.o(.data)
 <LI><a href="#[4]">usb_delay_us</a> from usb_delay.o(i.usb_delay_us) referenced 2 times from usb.o(.data)
 <LI><a href="#[7]">usbd_clrfeature</a> from usbd_std.o(i.usbd_clrfeature) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[13]">usbd_configuration_descriptor_get</a> from usbd_std.o(i.usbd_configuration_descriptor_get) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[12]">usbd_device_descriptor_get</a> from usbd_std.o(i.usbd_device_descriptor_get) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[d]">usbd_getconfig</a> from usbd_std.o(i.usbd_getconfig) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[b]">usbd_getdescriptor</a> from usbd_std.o(i.usbd_getdescriptor) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[f]">usbd_getinterface</a> from usbd_std.o(i.usbd_getinterface) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[6]">usbd_getstatus</a> from usbd_std.o(i.usbd_getstatus) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[2]">usbd_hid_classreq_handle</a> from hid_core.o(i.usbd_hid_classreq_handle) referenced 2 times from usb.o(.data)
 <LI><a href="#[3]">usbd_hid_data_handler</a> from hid_core.o(i.usbd_hid_data_handler) referenced 2 times from usb.o(.data)
 <LI><a href="#[1]">usbd_hid_deinit</a> from hid_core.o(i.usbd_hid_deinit) referenced 2 times from usb.o(.data)
 <LI><a href="#[0]">usbd_hid_init</a> from hid_core.o(i.usbd_hid_init) referenced 2 times from usb.o(.data)
 <LI><a href="#[8]">usbd_reserved</a> from usbd_std.o(i.usbd_reserved) referenced 4 times from usbd_std.o(.data)
 <LI><a href="#[a]">usbd_setaddress</a> from usbd_std.o(i.usbd_setaddress) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[e]">usbd_setconfig</a> from usbd_std.o(i.usbd_setconfig) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[c]">usbd_setdescriptor</a> from usbd_std.o(i.usbd_setdescriptor) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[9]">usbd_setfeature</a> from usbd_std.o(i.usbd_setfeature) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[10]">usbd_setinterface</a> from usbd_std.o(i.usbd_setinterface) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[14]">usbd_string_descriptor_get</a> from usbd_std.o(i.usbd_string_descriptor_get) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[11]">usbd_synchframe</a> from usbd_std.o(i.usbd_synchframe) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[4c]">wakeup_hdr</a> from system.o(i.wakeup_hdr) referenced from system.o(i.sleep_int_install)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(.text)
</UL>
<P><STRONG><a name="[1b2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1b4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1b6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1b7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA_Channel5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f3x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[1b8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pos_smooth_new_Lib
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_smooth
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
</UL>

<P><STRONG><a name="[1ba]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devName
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_ble_firmwareVer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dongle_parse
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_protocolParse
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pos_smooth_new_Lib
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_load
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_get
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_handPad_firmwareVer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_gamma_calibration
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_batt_value
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ble_led_light_get_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dongle_parse
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs572_setup
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_serial_open
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_load
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_handPad_firmwareVer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devName
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dongle_parse
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_protocolParse
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_1s_task
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16c]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[b9]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
</UL>

<P><STRONG><a name="[186]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devName
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[1c1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[66]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>ALLOFF_4051_Chip</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xy_antana.o(i.ALLOFF_4051_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YOFF_4051_Chip
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOFF_4051_Chip
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
</UL>

<P><STRONG><a name="[7c]"></a>AutoJitter</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, digitizer_comm.o(i.AutoJitter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AutoJitter &rArr; AutoJitterSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoJitterSendToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[7d]"></a>AutoJitterSendToBuffer</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, digitizer_comm.o(i.AutoJitterSendToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoJitterSendToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoJitter
</UL>

<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>ClrTimerTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, taskschedule.o(i.ClrTimerTask))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>

<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>DeterminePenArea</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, digitizer_comm.o(i.DeterminePenArea))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[2c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gd32f3x0_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EXTI0_1_IRQHandler &rArr; usb_delay_ms &rArr; delay_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_ungate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usbfs_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ck48m_clock_config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_3_IRQHandler &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, drv_pin.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>GetCheckSumHEX</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_usart.o(i.GetCheckSumHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCheckSumHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_analyze
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_handPad_firmwareVer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devName
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devInfo
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_chrgSta
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_batt_value
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dongle_parse
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ble_led_light_get_response
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_1s_task
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>Inverter</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, digitizer_comm.o(i.Inverter))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[87]"></a>Mapping</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, digitizer_comm.o(i.Mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mapping
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_support_get
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>Offset</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, digitizer_comm.o(i.Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[25]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>PosCalcCoordinate_3And4Line_Lib</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, digitizer_lib_200722.o(i.PosCalcCoordinate_3And4Line_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PosCalcCoordinate_3And4Line_Lib &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Ycoordinate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Xcoordinate
</UL>

<P><STRONG><a name="[8c]"></a>PosCalcP_Lib</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, digitizer_lib_200722.o(i.PosCalcP_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PosCalcP_Lib &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_freq_calculate
</UL>

<P><STRONG><a name="[8e]"></a>Pos_smooth_new_Lib</STRONG> (Thumb, 546 bytes, Stack size 80 bytes, digitizer_lib_200722.o(i.Pos_smooth_new_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Pos_smooth_new_Lib &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth
</UL>

<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>SetTimerTask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, taskschedule.o(i.SetTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetTimerTask
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>

<P><STRONG><a name="[92]"></a>Smooth</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, digitizer_comm.o(i.Smooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Smooth &rArr; Pos_smooth_new_Lib &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pos_smooth_new_Lib
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[26]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, system_gd32f3x0.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, system_gd32f3x0.o(i.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timer.o(i.TIMER0_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TIMER0_BRK_UP_TRG_COM_IRQHandler &rArr; scan_recv &rArr; scan_y_recv &rArr; scan_main_calculate &rArr; scan_calculate &rArr; Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_recv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.TIMER13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER13_IRQHandler &rArr; timer13_delay_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer13_delay_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, timer.o(i.TIMER15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER15_IRQHandler &rArr; scan_chrg &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_chrg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_pre_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_idx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>Tilt</STRONG> (Thumb, 150 bytes, Stack size 120 bytes, digitizer_comm.o(i.Tilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[a0]"></a>Tilt_LIB_B</STRONG> (Thumb, 3378 bytes, Stack size 96 bytes, digitizer_lib_200722.o(i.Tilt_LIB_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_smooth
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt
</UL>

<P><STRONG><a name="[a1]"></a>Tilt_smooth</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, digitizer_lib_200722.o(i.Tilt_smooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Tilt_smooth &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt_LIB_B
</UL>

<P><STRONG><a name="[a2]"></a>TimerTaskScheduler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, taskschedule.o(i.TimerTaskScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerTaskScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>USART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART0_IRQHandler &rArr; usart_isr &rArr; ug_hw_serial_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBFS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.USBFS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBFS_IRQHandler &rArr; usbd_isr &rArr; usbd_intf_outep &rArr; usbd_setup_transaction &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gd32f3x0_it.o(i.USBFS_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBFS_WKUP_IRQHandler &rArr; usb_clock_ungate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_ungate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usbfs_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ck48m_clock_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f3x0_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f3x0.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>XOFF_4051_Chip</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xy_antana.o(i.XOFF_4051_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLOFF_4051_Chip
</UL>

<P><STRONG><a name="[7a]"></a>YOFF_4051_Chip</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, xy_antana.o(i.YOFF_4051_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLOFF_4051_Chip
</UL>

<P><STRONG><a name="[1c7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1c8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1c9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[106]"></a>_serial_int_rx</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _serial_int_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_read
</UL>

<P><STRONG><a name="[107]"></a>_serial_int_tx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _serial_int_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
</UL>

<P><STRONG><a name="[c4]"></a>adc_calibration_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[c0]"></a>adc_channel_length_config</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_channel_length_config))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[bb]"></a>adc_config</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, adc.o(i.adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_config &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[bf]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[16a]"></a>adc_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_before_sleep
</UL>

<P><STRONG><a name="[c3]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[c2]"></a>adc_external_trigger_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[be]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[c6]"></a>adc_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
</UL>

<P><STRONG><a name="[c8]"></a>adc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
</UL>

<P><STRONG><a name="[14a]"></a>adc_get_last_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.adc_get_last_value))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
</UL>

<P><STRONG><a name="[149]"></a>adc_get_sum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc.o(i.adc_get_sum))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
</UL>

<P><STRONG><a name="[c1]"></a>adc_regular_channel_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gd32f3x0_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[c5]"></a>adc_sampling_start</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, adc.o(i.adc_sampling_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_sampling_start &rArr; ugee_adc_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
</UL>

<P><STRONG><a name="[c7]"></a>adc_software_trigger_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
</UL>

<P><STRONG><a name="[bd]"></a>adc_special_function_config</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gd32f3x0_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[c9]"></a>antenna_open</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, xy_antana.o(i.antenna_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLOFF_4051_Chip
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_chrg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
</UL>

<P><STRONG><a name="[cb]"></a>bkp_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(i.bkp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[15a]"></a>calibration_X</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, xy_calibration.o(i.calibration_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calibration_X
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[15b]"></a>calibration_Y</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, xy_calibration.o(i.calibration_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calibration_Y
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[1b]"></a>comm_repeat_report</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, comm.o(i.comm_repeat_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = comm_repeat_report &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>config_android_direction_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, config.o(i.config_android_direction_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_android_direction_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_android_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_android_set
</UL>

<P><STRONG><a name="[cf]"></a>config_android_handle_get</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, config.o(i.config_android_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = config_android_handle_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[aa]"></a>config_android_handle_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, config.o(i.config_android_handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_android_handle_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_ble_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_android_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_android_set
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[88]"></a>config_android_support_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.config_android_support_get))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapping
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
</UL>

<P><STRONG><a name="[a9]"></a>config_android_support_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, config.o(i.config_android_support_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_android_support_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_android_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_android_set
</UL>

<P><STRONG><a name="[7e]"></a>config_channel_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.config_channel_get))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoJitterSendToBuffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_repeat_report
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
</UL>

<P><STRONG><a name="[a7]"></a>config_channel_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, config.o(i.config_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_channel_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_android_set
</UL>

<P><STRONG><a name="[d0]"></a>config_dfu_flag_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, config.o(i.config_dfu_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_dfu_flag_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[ad]"></a>config_footled_duty_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.config_footled_duty_get))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_led_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_led_set
</UL>

<P><STRONG><a name="[af]"></a>config_footled_duty_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, config.o(i.config_footled_duty_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_footled_duty_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_led_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_led_set
</UL>

<P><STRONG><a name="[b6]"></a>config_get_rotate_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.config_get_rotate_mode))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
</UL>

<P><STRONG><a name="[d1]"></a>config_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, config.o(i.config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_init &rArr; product_info_calibration &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_input_data_reverse_config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_deinit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[d5]"></a>config_load</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, config.o(i.config_load), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_block_data_calculate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ce]"></a>config_store</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, config.o(i.config_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_data_register_reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_block_data_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_load
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_dfu_flag_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_trackpad_rotate_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_mode_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_footled_duty_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_support_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_direction_set
</UL>

<P><STRONG><a name="[b1]"></a>config_track_pad_duty_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.config_track_pad_duty_get))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_led_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_led_set
</UL>

<P><STRONG><a name="[b0]"></a>config_track_pad_duty_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(i.config_track_pad_duty_set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_led_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_led_set
</UL>

<P><STRONG><a name="[b5]"></a>config_track_pad_mode_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(i.config_track_pad_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
</UL>

<P><STRONG><a name="[b3]"></a>config_track_pad_mode_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, config.o(i.config_track_pad_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_track_pad_mode_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
</UL>

<P><STRONG><a name="[ab]"></a>config_trackpad_rotate_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, config.o(i.config_trackpad_rotate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_android_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_android_set
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[d6]"></a>crc_block_data_calculate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32f3x0_crc.o(i.crc_block_data_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_block_data_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_load
</UL>

<P><STRONG><a name="[d8]"></a>crc_data_register_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_crc.o(i.crc_data_register_reset))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
</UL>

<P><STRONG><a name="[d2]"></a>crc_deinit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_crc.o(i.crc_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[d3]"></a>crc_input_data_reverse_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_crc.o(i.crc_input_data_reverse_config))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[f1]"></a>exti_init</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, gd32f3x0_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
</UL>

<P><STRONG><a name="[195]"></a>exti_interrupt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_exti.o(i.exti_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
</UL>

<P><STRONG><a name="[84]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
</UL>

<P><STRONG><a name="[7f]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f3x0_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
</UL>

<P><STRONG><a name="[dd]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
</UL>

<P><STRONG><a name="[db]"></a>fmc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gd32f3x0_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
</UL>

<P><STRONG><a name="[e4]"></a>fmc_ready_wait</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, gd32f3x0_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[e5]"></a>fmc_state_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[d9]"></a>fmc_unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
</UL>

<P><STRONG><a name="[dc]"></a>fmc_word_program</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, gd32f3x0_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_store
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
</UL>

<P><STRONG><a name="[e6]"></a>gd32_hw_usart_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usart.o(i.gd32_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gd32_hw_usart_init &rArr; ug_hw_serial_register &rArr; ug_serial_open &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_hw_serial_register
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[eb]"></a>gd32_pin_attach_irq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_pin.o(i.gd32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gd32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_install
</UL>

<P><STRONG><a name="[ee]"></a>gd32_pin_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, drv_pin.o(i.gd32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gd32_pin_irq_enable &rArr; exti_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_install
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_int_uninstall
</UL>

<P><STRONG><a name="[f3]"></a>gd32_pin_mode</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, drv_pin.o(i.gd32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_set
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_af_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_install
</UL>

<P><STRONG><a name="[f4]"></a>gd32_pin_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_pin.o(i.gd32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gd32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
</UL>

<P><STRONG><a name="[ca]"></a>gd32_pin_write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_pin.o(i.gd32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_set
</UL>

<P><STRONG><a name="[105]"></a>gd32_usart_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(i.gd32_usart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gd32_usart_read &rArr; _serial_int_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dispose_recvDataTask
</UL>

<P><STRONG><a name="[b8]"></a>gd32_usart_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(i.gd32_usart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gd32_usart_write &rArr; _serial_int_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_handPad_firmwareVer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devName
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_devInfo
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_chrgSta
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_batt_value
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dongle_parse
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ble_led_light_get_response
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_1s_task
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[108]"></a>gesture_report_click_end</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, iqs.o(i.gesture_report_click_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gesture_report_click_end &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>

<P><STRONG><a name="[10c]"></a>gesture_report_singleTap</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, iqs.o(i.gesture_report_singleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gesture_report_singleTap &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>

<P><STRONG><a name="[10d]"></a>get_Xcoordinate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, digitizer_comm.o(i.get_Xcoordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = get_Xcoordinate &rArr; PosCalcCoordinate_3And4Line_Lib &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[10e]"></a>get_Ycoordinate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, digitizer_comm.o(i.get_Ycoordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = get_Ycoordinate &rArr; PosCalcCoordinate_3And4Line_Lib &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcCoordinate_3And4Line_Lib
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[ec]"></a>get_pin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_pin.o(i.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_attach_irq
</UL>

<P><STRONG><a name="[109]"></a>get_report_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.get_report_mode))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
</UL>

<P><STRONG><a name="[e9]"></a>gpio_af_set</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, gd32f3x0_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>

<P><STRONG><a name="[f7]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f3x0_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
</UL>

<P><STRONG><a name="[f6]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f3x0_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
</UL>

<P><STRONG><a name="[10f]"></a>gpio_config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gpio.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_config &rArr; pin_out_set &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_set
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_af_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[f5]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_read
</UL>

<P><STRONG><a name="[e7]"></a>gpio_mode_set</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gd32f3x0_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>

<P><STRONG><a name="[e8]"></a>gpio_output_options_set</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, gd32f3x0_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>

<P><STRONG><a name="[114]"></a>hid_report</STRONG> (Thumb, 1612 bytes, Stack size 64 bytes, comm.o(i.hid_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hid_report &rArr; usb_rx_proc &rArr; usb_cmd_android_set &rArr; config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hand_pencil_status
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_support_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerTask
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>i2c_ack_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_ack_config))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[17a]"></a>i2c_ackpos_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_ackpos_config))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[11a]"></a>i2c_clock_config</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gd32f3x0_i2c.o(i.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
</UL>

<P><STRONG><a name="[182]"></a>i2c_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[17f]"></a>i2c_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[11c]"></a>i2c_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f3x0_i2c.o(i.i2c_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
</UL>

<P><STRONG><a name="[184]"></a>i2c_dualaddr_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_dualaddr_enable))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
</UL>

<P><STRONG><a name="[17e]"></a>i2c_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_enable))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[17d]"></a>i2c_flag_clear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[179]"></a>i2c_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[17c]"></a>i2c_master_addressing</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_master_addressing))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[183]"></a>i2c_mode_addr_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f3x0_i2c.o(i.i2c_mode_addr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_mode_addr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
</UL>

<P><STRONG><a name="[17b]"></a>i2c_start_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_start_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[181]"></a>i2c_stop_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_i2c.o(i.i2c_stop_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>

<P><STRONG><a name="[11f]"></a>iqs572_setup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iqs.o(i.iqs572_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iqs572_setup &rArr; iqs5xx_gesture_config &rArr; iqs5xx_buffer_write &rArr; ugee_i2c_buffer_write_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_gesture_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_comm_end
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_init
</UL>

<P><STRONG><a name="[122]"></a>iqs5xx_buffer_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iqs.o(i.iqs5xx_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iqs5xx_buffer_read &rArr; ugee_i2c_buffer_read_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read_iqs572
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_comm_end
</UL>

<P><STRONG><a name="[124]"></a>iqs5xx_buffer_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iqs.o(i.iqs5xx_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iqs5xx_buffer_write &rArr; ugee_i2c_buffer_write_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write_iqs572
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_gesture_config
</UL>

<P><STRONG><a name="[1a]"></a>iqs5xx_clear_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iqs.o(i.iqs5xx_clear_status))
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>iqs5xx_comm_end</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iqs.o(i.iqs5xx_comm_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iqs5xx_comm_end &rArr; iqs5xx_buffer_read &rArr; ugee_i2c_buffer_read_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs572_setup
</UL>

<P><STRONG><a name="[126]"></a>iqs5xx_events_process</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, iqs.o(i.iqs5xx_events_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iqs5xx_events_process &rArr; iqs5xx_track_mode_pro &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrTimerTask
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_comm_end
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_buffer_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
</UL>

<P><STRONG><a name="[120]"></a>iqs5xx_gesture_config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iqs.o(i.iqs5xx_gesture_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iqs5xx_gesture_config &rArr; iqs5xx_buffer_write &rArr; ugee_i2c_buffer_write_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs572_setup
</UL>

<P><STRONG><a name="[127]"></a>iqs5xx_track_mode_pro</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, iqs.o(i.iqs5xx_track_mode_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iqs5xx_track_mode_pro &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>

<P><STRONG><a name="[b4]"></a>iqs5xx_track_mode_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iqs.o(i.iqs5xx_track_mode_start))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
</UL>

<P><STRONG><a name="[12a]"></a>iqs624_setup</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, iqs.o(i.iqs624_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_buffer_write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_init
</UL>

<P><STRONG><a name="[12c]"></a>iqs6xx_buffer_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iqs.o(i.iqs6xx_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iqs6xx_buffer_read &rArr; ugee_i2c_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_events_process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs624_setup
</UL>

<P><STRONG><a name="[12b]"></a>iqs6xx_buffer_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iqs.o(i.iqs6xx_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs624_setup
</UL>

<P><STRONG><a name="[12f]"></a>iqs6xx_events_process</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, iqs.o(i.iqs6xx_events_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iqs6xx_events_process &rArr; wheel_data_report &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
</UL>

<P><STRONG><a name="[131]"></a>iqs_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iqs.o(i.iqs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iqs_init &rArr; iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs624_setup
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs572_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[133]"></a>iqs_interrupt_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iqs.o(i.iqs_interrupt_config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_init
</UL>

<P><STRONG><a name="[134]"></a>iqs_loop</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iqs.o(i.iqs_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iqs_loop &rArr; iqs5xx_events_process &rArr; iqs5xx_track_mode_pro &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_mode_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hand_pencil_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_events_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>key_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, key.o(i.key_init))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[1c]"></a>key_longPressReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, key.o(i.key_longPressReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_longPressReset &rArr; pin_read &rArr; gd32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>key_report</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, key.o(i.key_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = key_report &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_de
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>key_scan</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, key.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = key_scan &rArr; gd32_usart_write &rArr; _serial_int_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerTask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hand_pencil_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>key_status_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key.o(i.key_status_read))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_1s_task
</UL>

<P><STRONG><a name="[18]"></a>led_flash_monitor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.led_flash_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_flash_monitor &rArr; led_manage &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>led_foot_duty_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.led_foot_duty_set))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_led_set
</UL>

<P><STRONG><a name="[143]"></a>led_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.led_init))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[13c]"></a>led_manage</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, led.o(i.led_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_manage &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_monitor
</UL>

<P><STRONG><a name="[119]"></a>led_mode_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.led_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>led_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_off &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = main &rArr; hid_report &rArr; usb_rx_proc &rArr; usb_cmd_android_set &rArr; config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_mode_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTaskScheduler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[178]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_serial_open
</UL>

<P><STRONG><a name="[f2]"></a>nvic_irq_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
</UL>

<P><STRONG><a name="[ef]"></a>nvic_irq_enable</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gd32f3x0_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_nvic_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_control
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
</UL>

<P><STRONG><a name="[140]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[13e]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>pen_key_status_update</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, pressure.o(i.pen_key_status_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pen_key_status_update
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calculate
</UL>

<P><STRONG><a name="[141]"></a>peripheral_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system.o(i.peripheral_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peripheral_init &rArr; iqs_init &rArr; iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[113]"></a>pin_af_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_pin.o(i.pin_af_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pin_af_init &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[110]"></a>pin_in_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_pin.o(i.pin_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pin_in_init &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_interrupt_config
</UL>

<P><STRONG><a name="[147]"></a>pin_irq_install</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, drv_pin.o(i.pin_irq_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pin_irq_install &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_attach_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_int_install
</UL>

<P><STRONG><a name="[112]"></a>pin_out_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_pin.o(i.pin_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pin_out_init &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[97]"></a>pin_out_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_pin.o(i.pin_out_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_out_off &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_manage
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BRK_UP_TRG_COM_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_judge_curr_mode
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_1s_task
</UL>

<P><STRONG><a name="[a5]"></a>pin_out_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_pin.o(i.pin_out_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_chrg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_manage
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YOFF_4051_Chip
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOFF_4051_Chip
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[111]"></a>pin_out_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_pin.o(i.pin_out_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pin_out_set &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[136]"></a>pin_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_pin.o(i.pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_read &rArr; gd32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_longPressReset
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_judge_curr_mode
</UL>

<P><STRONG><a name="[cc]"></a>pmu_backup_write_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f3x0_pmu.o(i.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_init
</UL>

<P><STRONG><a name="[16b]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, gd32f3x0_pmu.o(i.pmu_to_deepsleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_halt
</UL>

<P><STRONG><a name="[14d]"></a>pressure_calculate</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, pressure.o(i.pressure_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pressure_calculate &rArr; pressure_freq_calculate &rArr; PosCalcP_Lib &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_smooth
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_gamma_calibration
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_freq_calculate
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pen_key_status_update
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
</UL>

<P><STRONG><a name="[14f]"></a>pressure_freq_calculate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pressure.o(i.pressure_freq_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pressure_freq_calculate &rArr; PosCalcP_Lib &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosCalcP_Lib
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calculate
</UL>

<P><STRONG><a name="[151]"></a>pressure_gamma_calibration</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, pressure.o(i.pressure_gamma_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pressure_gamma_calibration &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calculate
</UL>

<P><STRONG><a name="[150]"></a>pressure_smooth</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pressure.o(i.pressure_smooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pressure_smooth
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calculate
</UL>

<P><STRONG><a name="[153]"></a>prvSetupHardware</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system.o(i.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvSetupHardware &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
</UL>

<P><STRONG><a name="[14b]"></a>pwm_period_idx_get_by_pre_idx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i.pwm_period_idx_get_by_pre_idx))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
</UL>

<P><STRONG><a name="[9c]"></a>pwm_period_set_by_idx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pwm.o(i.pwm_period_set_by_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwm_period_set_by_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_event_software_generate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_autoreload_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>pwm_period_set_by_pre_idx</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pwm.o(i.pwm_period_set_by_pre_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwm_period_set_by_pre_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_event_software_generate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_autoreload_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>queue_de</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, queue.o(i.queue_de))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_de &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
</UL>

<P><STRONG><a name="[13b]"></a>queue_en</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.queue_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_en &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
</UL>

<P><STRONG><a name="[138]"></a>queue_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[bc]"></a>rcu_adc_clock_config</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[80]"></a>rcu_ck48m_clock_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_ck48m_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
</UL>

<P><STRONG><a name="[11b]"></a>rcu_clock_freq_get</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, gd32f3x0_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[82]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_i2c_config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_interrupt_config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_mode
</UL>

<P><STRONG><a name="[11e]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[11d]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[81]"></a>rcu_usbfs_clock_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f3x0_rcu.o(i.rcu_usbfs_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
</UL>

<P><STRONG><a name="[135]"></a>read_hand_pencil_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(i.read_hand_pencil_status))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_loop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[159]"></a>scan_calculate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scan.o(i.scan_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = scan_calculate &rArr; Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Ycoordinate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Xcoordinate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tilt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mapping
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePenArea
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoJitter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_Y
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_X
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_main_calculate
</UL>

<P><STRONG><a name="[9d]"></a>scan_chrg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scan.o(i.scan_chrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scan_chrg &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>scan_main_calculate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, scan.o(i.scan_main_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = scan_main_calculate &rArr; scan_calculate &rArr; Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_calculate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_delay_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
</UL>

<P><STRONG><a name="[99]"></a>scan_recv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, scan.o(i.scan_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = scan_recv &rArr; scan_y_recv &rArr; scan_main_calculate &rArr; scan_calculate &rArr; Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>scan_reset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, scan.o(i.scan_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scan_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[146]"></a>scan_start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, scan.o(i.scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scan_start &rArr; scan_chrg &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_chrg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_pre_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[118]"></a>set_hand_pencil_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(i.set_hand_pencil_status))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
</UL>

<P><STRONG><a name="[1a3]"></a>set_report_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.set_report_mode))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[164]"></a>sleep_int_install</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, system.o(i.sleep_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sleep_int_install &rArr; pin_irq_install &rArr; gd32_pin_mode &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_install
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_halt
</UL>

<P><STRONG><a name="[165]"></a>sleep_int_uninstall</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, system.o(i.sleep_int_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sleep_int_uninstall &rArr; gd32_pin_irq_enable &rArr; exti_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_halt
</UL>

<P><STRONG><a name="[86]"></a>soft_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, config.o(i.soft_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_longPressReset
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
</UL>

<P><STRONG><a name="[f0]"></a>syscfg_exti_line_config</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gd32f3x0_syscfg.o(i.syscfg_exti_line_config))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
</UL>

<P><STRONG><a name="[16]"></a>system_1s_task</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, system.o(i.system_1s_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = system_1s_task &rArr; system_halt &rArr; system_config_after_wakeup &rArr; iqs_init &rArr; iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_status_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_halt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>system_clear_sleep_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system.o(i.system_clear_sleep_count))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
</UL>

<P><STRONG><a name="[167]"></a>system_config_after_wakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(i.system_config_after_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = system_config_after_wakeup &rArr; iqs_init &rArr; iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_halt
</UL>

<P><STRONG><a name="[168]"></a>system_config_before_sleep</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system.o(i.system_config_before_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_config_before_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_halt
</UL>

<P><STRONG><a name="[166]"></a>system_halt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system.o(i.system_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = system_halt &rArr; system_config_after_wakeup &rArr; iqs_init &rArr; iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_before_sleep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_int_uninstall
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_1s_task
</UL>

<P><STRONG><a name="[13f]"></a>system_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = system_init &rArr; peripheral_init &rArr; iqs_init &rArr; iqs624_setup &rArr; iqs6xx_buffer_write &rArr; ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>system_judge_curr_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, system.o(i.system_judge_curr_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_judge_curr_mode &rArr; pin_out_off &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_off
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[155]"></a>systick_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, systick.o(i.systick_config))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[16d]"></a>timer0_init</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, timer.o(i.timer0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = timer0_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_source_config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[9a]"></a>timer13_delay_irq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_delay.o(i.timer13_delay_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer13_delay_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER13_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>timer14_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timer.o(i.timer14_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer14_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[174]"></a>timer15_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timer.o(i.timer15_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timer15_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[175]"></a>timer_auto_reload_shadow_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_auto_reload_shadow_disable))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
</UL>

<P><STRONG><a name="[171]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[156]"></a>timer_autoreload_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_autoreload_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_pre_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_idx
</UL>

<P><STRONG><a name="[16e]"></a>timer_channel_output_config</STRONG> (Thumb, 476 bytes, Stack size 12 bytes, gd32f3x0_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[16f]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[13d]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_foot_duty_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_pre_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_idx
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[170]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[144]"></a>timer_config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = timer_config &rArr; timer0_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_after_wakeup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[df]"></a>timer_deinit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, gd32f3x0_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[169]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer13_delay_irq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_us
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_config_before_sleep
</UL>

<P><STRONG><a name="[9e]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_chrg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>timer_event_software_generate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_event_software_generate))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_pre_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_idx
</UL>

<P><STRONG><a name="[96]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer13_delay_irq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>timer_flag_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer13_delay_irq
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>timer_init</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, gd32f3x0_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[e2]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[172]"></a>timer_primary_output_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[157]"></a>timer_single_pulse_mode_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_single_pulse_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_pre_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_set_by_idx
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[e1]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_update_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
</UL>

<P><STRONG><a name="[e3]"></a>timer_update_source_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_timer.o(i.timer_update_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
</UL>

<P><STRONG><a name="[128]"></a>trackpad_data_report</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, iqs.o(i.trackpad_data_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = trackpad_data_report &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_rotate_mode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_events_process
</UL>

<P><STRONG><a name="[152]"></a>u16saveu32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, config.o(i.u16saveu32))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_calibration
</UL>

<P><STRONG><a name="[18a]"></a>ug_hw_serial_isr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, serial.o(i.ug_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ug_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[ea]"></a>ug_hw_serial_register</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serial.o(i.ug_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ug_hw_serial_register &rArr; ug_serial_open &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_serial_open
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[91]"></a>ug_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.ug_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTaskScheduler
</UL>

<P><STRONG><a name="[93]"></a>ug_tick_increase</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(i.ug_tick_increase))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[98]"></a>ugee_adc_delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.ugee_adc_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ugee_adc_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_y_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_y_recv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_scan_x_recv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>ugee_i2c_buffer_read</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, ugee_i2c.o(i.ugee_i2c_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ugee_i2c_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_buffer_read
</UL>

<P><STRONG><a name="[123]"></a>ugee_i2c_buffer_read_iqs572</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, ugee_i2c.o(i.ugee_i2c_buffer_read_iqs572))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ugee_i2c_buffer_read_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_buffer_read
</UL>

<P><STRONG><a name="[12e]"></a>ugee_i2c_buffer_write</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ugee_i2c.o(i.ugee_i2c_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ugee_i2c_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_buffer_write
</UL>

<P><STRONG><a name="[125]"></a>ugee_i2c_buffer_write_iqs572</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, ugee_i2c.o(i.ugee_i2c_buffer_write_iqs572))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ugee_i2c_buffer_write_iqs572
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_buffer_write
</UL>

<P><STRONG><a name="[132]"></a>ugee_i2c_config</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ugee_i2c.o(i.ugee_i2c_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ugee_i2c_config &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dualaddr_enable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs_init
</UL>

<P><STRONG><a name="[f8]"></a>usart_baudrate_set</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gd32f3x0_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[185]"></a>usart_data_analyze</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, app_usart.o(i.usart_data_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usart_data_analyze &rArr; GetCheckSumHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dispose_recvDataTask
</UL>

<P><STRONG><a name="[fc]"></a>usart_data_first_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_data_first_config))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[18b]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[176]"></a>usart_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f3x0_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_hw_serial_register
</UL>

<P><STRONG><a name="[15]"></a>usart_dispose_recvDataTask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_usart.o(i.usart_dispose_recvDataTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usart_dispose_recvDataTask &rArr; usart_data_analyze &rArr; GetCheckSumHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_analyze
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskschedule.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[189]"></a>usart_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[104]"></a>usart_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_putc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_getc
</UL>

<P><STRONG><a name="[102]"></a>usart_interrupt_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_control
</UL>

<P><STRONG><a name="[103]"></a>usart_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_control
</UL>

<P><STRONG><a name="[188]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[187]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f3x0_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[fd]"></a>usart_invert_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_invert_config))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[a3]"></a>usart_isr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usart.o(i.usart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usart_isr &rArr; ug_hw_serial_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>usart_overrun_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_overrun_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[fa]"></a>usart_parity_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[ff]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[fb]"></a>usart_stop_bit_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[100]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[f9]"></a>usart_word_length_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f3x0_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_configure
</UL>

<P><STRONG><a name="[18c]"></a>usb_clock_config</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usb.o(i.usb_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usbfs_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ck48m_clock_config
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_config
</UL>

<P><STRONG><a name="[83]"></a>usb_clock_ungate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.usb_clock_ungate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_clock_ungate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>usb_config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb.o(i.usb_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_config &rArr; usb_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_nvic_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_interrupt_config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[1a8]"></a>usb_core_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.usb_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[1a7]"></a>usb_core_select</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_core.o(i.usb_core_select))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[5]"></a>usb_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_delay.o(i.usb_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_delay_ms &rArr; delay_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>usb_delay_us</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_delay.o(i.usb_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_delay_us &rArr; delay_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[192]"></a>usb_devcore_init</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, usb_core.o(i.usb_devcore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_devcore_init &rArr; usb_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[19e]"></a>usb_ep0_startout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_core.o(i.usb_ep0_startout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_ep0_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_rx
</UL>

<P><STRONG><a name="[1b0]"></a>usb_fifo_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_core.o(i.usb_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_rxfifo
</UL>

<P><STRONG><a name="[1a2]"></a>usb_fifo_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.usb_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
</UL>

<P><STRONG><a name="[191]"></a>usb_interrupt_config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb.o(i.usb_interrupt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usb_interrupt_config &rArr; exti_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_config
</UL>

<P><STRONG><a name="[1a9]"></a>usb_mode_set</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.usb_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[115]"></a>usb_rx_proc</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, usb.o(i.usb_rx_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usb_rx_proc &rArr; usb_cmd_android_set &rArr; config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_start
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_trackpad_rotate_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_mode_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_mode_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_rotate_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_protocolParse
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_led_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_android_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
</UL>

<P><STRONG><a name="[194]"></a>usb_rxfifo_flush</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_core.o(i.usb_rxfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[18f]"></a>usb_timer_nvic_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_delay.o(i.usb_timer_nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_timer_nvic_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_config
</UL>

<P><STRONG><a name="[cd]"></a>usb_tx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb.o(i.usb_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_report_send
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_report
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_repeat_report
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_issue_mac
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_get_batt_value
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_ble_led_light_get_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_report
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wheel_data_report
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackpad_data_report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_pro
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_singleTap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gesture_report_click_end
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_protocolParse
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_led_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_cmd_android_set
</UL>

<P><STRONG><a name="[193]"></a>usb_txfifo_flush</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.usb_txfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
</UL>

<P><STRONG><a name="[19d]"></a>usbd_ctlstatus_rx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctlstatus_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ctlstatus_rx &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
</UL>

<P><STRONG><a name="[19c]"></a>usbd_ctlstatus_tx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctlstatus_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setconfig
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setaddress
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
</UL>

<P><STRONG><a name="[1a0]"></a>usbd_ctltx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ctltx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_classreq_handle
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getstatus
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getconfig
</UL>

<P><STRONG><a name="[199]"></a>usbd_enum_error</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_std.o(i.usbd_enum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_enum_error &rArr; usb_ep0_startout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_classreq_handle
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setconfig
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setaddress
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getstatus
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getconfig
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[19b]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
</UL>

<P><STRONG><a name="[1a4]"></a>usbd_ep_deinit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ep_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_deinit
</UL>

<P><STRONG><a name="[1a5]"></a>usbd_ep_init</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, usbd_core.o(i.usbd_ep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_init
</UL>

<P><STRONG><a name="[197]"></a>usbd_ep_rx</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, usbd_core.o(i.usbd_ep_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_rx
</UL>

<P><STRONG><a name="[19a]"></a>usbd_ep_stall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clrfeature
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[19f]"></a>usbd_ep_tx</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_ep_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_report_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>

<P><STRONG><a name="[2]"></a>usbd_hid_classreq_handle</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, hid_core.o(i.usbd_hid_classreq_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_hid_classreq_handle &rArr; usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>usbd_hid_data_handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hid_core.o(i.usbd_hid_data_handler))
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>usbd_hid_deinit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hid_core.o(i.usbd_hid_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_hid_deinit &rArr; usbd_ep_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>usbd_hid_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hid_core.o(i.usbd_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_hid_init &rArr; usbd_ep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[198]"></a>usbd_hid_report_send</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hid_core.o(i.usbd_hid_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
</UL>

<P><STRONG><a name="[1a6]"></a>usbd_in_transaction</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usbd_std.o(i.usbd_in_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_in_transaction &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_inep
</UL>

<P><STRONG><a name="[190]"></a>usbd_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_init &rArr; usb_devcore_init &rArr; usb_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mode_set
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_select
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_config
</UL>

<P><STRONG><a name="[a4]"></a>usbd_isr</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, usbd_int.o(i.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_isr &rArr; usbd_intf_outep &rArr; usbd_setup_transaction &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_rxfifo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_outep
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_inep
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_enumfinish
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>usbd_out_transaction</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usbd_std.o(i.usbd_out_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_out_transaction &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_outep
</UL>

<P><STRONG><a name="[1ad]"></a>usbd_setup_transaction</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setup_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_setup_transaction &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_outep
</UL>

<P><STRONG><a name="[130]"></a>wheel_data_report</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, iqs.o(i.wheel_data_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wheel_data_report &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_sleep_count
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_report_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs6xx_events_process
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a6]"></a>__cmd_android_set</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_usart.o(i.__cmd_android_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cmd_android_set &rArr; config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_trackpad_rotate_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_support_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_direction_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
</UL>

<P><STRONG><a name="[ac]"></a>__cmd_led_set</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_usart.o(i.__cmd_led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cmd_led_set &rArr; config_footled_duty_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_foot_duty_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_duty_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_duty_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_footled_duty_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_footled_duty_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
</UL>

<P><STRONG><a name="[b2]"></a>__dongle_protocolParse</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, app_usart.o(i.__dongle_protocolParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __dongle_protocolParse &rArr; __cmd_led_set &rArr; config_footled_duty_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iqs5xx_track_mode_start
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_trackpad_rotate_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_mode_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_mode_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_get_rotate_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_channel_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_led_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cmd_android_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dongle_parse
</UL>

<P><STRONG><a name="[58]"></a>usart_ble_led_light_get_response</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, app_usart.o(i.usart_ble_led_light_get_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usart_ble_led_light_get_response &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>usart_ble_led_light_set_response</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_usart.o(i.usart_ble_led_light_set_response))
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>usart_dongle_parse</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, app_usart.o(i.usart_dongle_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usart_dongle_parse &rArr; __dongle_protocolParse &rArr; __cmd_led_set &rArr; config_footled_duty_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dongle_protocolParse
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>usart_get_batt_value</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_usart.o(i.usart_get_batt_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart_get_batt_value &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>usart_get_ble_firmwareVer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_usart.o(i.usart_get_ble_firmwareVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_get_ble_firmwareVer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>usart_get_ble_mac</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_usart.o(i.usart_get_ble_mac))
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>usart_get_ble_matches</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_usart.o(i.usart_get_ble_matches))
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>usart_get_ble_status</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_usart.o(i.usart_get_ble_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_get_ble_status &rArr; config_android_handle_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>usart_get_chrgSta</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_usart.o(i.usart_get_chrgSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usart_get_chrgSta &rArr; gd32_usart_write &rArr; _serial_int_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>usart_get_devInfo</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_usart.o(i.usart_get_devInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usart_get_devInfo &rArr; gd32_usart_write &rArr; _serial_int_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>usart_get_devName</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_usart.o(i.usart_get_devName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_get_devName &rArr; gd32_usart_write &rArr; _serial_int_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>usart_get_handPad_firmwareVer</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_usart.o(i.usart_get_handPad_firmwareVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_get_handPad_firmwareVer &rArr; gd32_usart_write &rArr; _serial_int_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>usart_get_issue_mac</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_usart.o(i.usart_get_issue_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart_get_issue_mac &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>product_info_calibration</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, config.o(i.product_info_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = product_info_calibration &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16saveu32
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[148]"></a>pre_scan_x_recv</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, scan.o(i.pre_scan_x_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pre_scan_x_recv &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_last_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_period_idx_get_by_pre_idx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_recv
</UL>

<P><STRONG><a name="[14c]"></a>pre_scan_y_recv</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, scan.o(i.pre_scan_y_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pre_scan_y_recv &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_last_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_recv
</UL>

<P><STRONG><a name="[160]"></a>scan_delay_adjust</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, scan.o(i.scan_delay_adjust))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_main_calculate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_x_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_pressure_recv
</UL>

<P><STRONG><a name="[161]"></a>scan_pressure_recv</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, scan.o(i.scan_pressure_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scan_pressure_recv &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_last_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_delay_adjust
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_recv
</UL>

<P><STRONG><a name="[162]"></a>scan_x_recv</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, scan.o(i.scan_x_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scan_x_recv &rArr; antenna_open &rArr; ALLOFF_4051_Chip &rArr; YOFF_4051_Chip &rArr; pin_out_on &rArr; gd32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_last_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_delay_adjust
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_recv
</UL>

<P><STRONG><a name="[163]"></a>scan_y_recv</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, scan.o(i.scan_y_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = scan_y_recv &rArr; scan_main_calculate &rArr; scan_calculate &rArr; Tilt &rArr; Tilt_LIB_B &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugee_adc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sampling_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_last_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antenna_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_main_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_recv
</UL>

<P><STRONG><a name="[4c]"></a>wakeup_hdr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.wakeup_hdr))
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.sleep_int_install)
</UL>
<P><STRONG><a name="[5a]"></a>gd32_usart_configure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usart.o(i.gd32_usart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gd32_usart_configure &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_overrun_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_invert_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_first_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>gd32_usart_control</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usart.o(i.gd32_usart_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gd32_usart_control &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>gd32_usart_getc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.gd32_usart_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd32_usart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>gd32_usart_putc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart.o(i.gd32_usart_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd32_usart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>usb_cmd_android_set</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, usb.o(i.usb_cmd_android_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usb_cmd_android_set &rArr; config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_trackpad_rotate_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_support_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_direction_set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
</UL>

<P><STRONG><a name="[18e]"></a>usb_cmd_led_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, usb.o(i.usb_cmd_led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_cmd_led_set &rArr; config_footled_duty_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_duty_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_track_pad_duty_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_footled_duty_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_footled_duty_get
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
</UL>

<P><STRONG><a name="[196]"></a>usb_protocolParse</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, usb.o(i.usb_protocolParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_protocolParse &rArr; usb_tx &rArr; usbd_hid_report_send &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_tx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rx_proc
</UL>

<P><STRONG><a name="[de]"></a>delay_time_set</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usb_delay.o(i.delay_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = delay_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_event_enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_source_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_ms
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_delay_us
</UL>

<P><STRONG><a name="[94]"></a>system_clock_72m_hxtal</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, system_gd32f3x0.o(i.system_clock_72m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a1]"></a>usbd_emptytxfifo_write</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_emptytxfifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_emptytxfifo_write &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_inep
</UL>

<P><STRONG><a name="[1b1]"></a>usbd_intf_enumfinish</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_intf_enumfinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_intf_enumfinish
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[1aa]"></a>usbd_intf_inep</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usbd_int.o(i.usbd_intf_inep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_intf_inep &rArr; usbd_in_transaction &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[1ab]"></a>usbd_intf_outep</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_intf_outep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_intf_outep &rArr; usbd_setup_transaction &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[1ae]"></a>usbd_intf_reset</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_intf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_intf_reset &rArr; usb_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ep0_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[1af]"></a>usbd_intf_rxfifo</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_int.o(i.usbd_intf_rxfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_intf_rxfifo &rArr; usb_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[7]"></a>usbd_clrfeature</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_clrfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_clrfeature &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>usbd_configuration_descriptor_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_configuration_descriptor_get))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>usbd_device_descriptor_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_device_descriptor_get))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>usbd_getconfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_getconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_getconfig &rArr; usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>usbd_getdescriptor</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, usbd_std.o(i.usbd_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usbd_getdescriptor &rArr; config_trackpad_rotate_set &rArr; config_store &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_dfu_flag_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_usart_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_trackpad_rotate_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_android_handle_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumHEX
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_out_on
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_report_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>usbd_getinterface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_getinterface))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>usbd_getstatus</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_std.o(i.usbd_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_getstatus &rArr; usbd_ctltx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctltx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>usbd_reserved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_reserved))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>usbd_setaddress</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_setaddress &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>usbd_setconfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_setconfig &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>usbd_setdescriptor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_setdescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>usbd_setfeature</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_setfeature &rArr; usbd_ctlstatus_tx &rArr; usbd_ep_tx &rArr; usb_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctlstatus_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>usbd_setinterface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_setinterface))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>usbd_string_descriptor_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_string_descriptor_get))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>usbd_synchframe</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_synchframe))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>bit2bitno</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_pin.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_irq_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_pin_attach_irq
</UL>

<P><STRONG><a name="[85]"></a>pin_irq_hdr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_pin.o(i.pin_irq_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>ug_serial_open</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, serial.o(i.ug_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ug_serial_open &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ug_hw_serial_register
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
